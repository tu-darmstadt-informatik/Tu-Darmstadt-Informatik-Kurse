<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="mavlc.codegen.output.OutputCompareTest" tests="9" skipped="0" failures="0" errors="0" timestamp="2019-02-07T15:10:49" hostname="loewe" time="0.995">
  <properties/>
  <testcase name="testExample[lhs1]" classname="mavlc.codegen.output.OutputCompareTest" time="0.585"/>
  <testcase name="testExample[lhs2]" classname="mavlc.codegen.output.OutputCompareTest" time="0.052"/>
  <testcase name="testExample[recordSelect1]" classname="mavlc.codegen.output.OutputCompareTest" time="0.032"/>
  <testcase name="testExample[Switchcase2]" classname="mavlc.codegen.output.OutputCompareTest" time="0.04"/>
  <testcase name="testExample[Switchcase1]" classname="mavlc.codegen.output.OutputCompareTest" time="0.059"/>
  <testcase name="testExample[foreach1]" classname="mavlc.codegen.output.OutputCompareTest" time="0.068"/>
  <testcase name="testExample[foreach2]" classname="mavlc.codegen.output.OutputCompareTest" time="0.086"/>
  <testcase name="testExample[Select1]" classname="mavlc.codegen.output.OutputCompareTest" time="0.018"/>
  <testcase name="testExample[division01]" classname="mavlc.codegen.output.OutputCompareTest" time="0.037"/>
  <system-out><![CDATA[[src/test/testcases/executables/P3/public/_2/lhs1.mavl, src/test/testcases/executables/P3/public/_2/lhs2.mavl, src/test/testcases/executables/P3/public/_3/recordSelect1.mavl, src/test/testcases/executables/P3/public/_4_1/Switchcase2.mavl, src/test/testcases/executables/P3/public/_4_1/Switchcase1.mavl, src/test/testcases/executables/P3/public/_4_2/foreach1.mavl, src/test/testcases/executables/P3/public/_4_2/foreach2.mavl, src/test/testcases/executables/P3/public/_4_3/Select1.mavl, src/test/testcases/executables/P3/public/_1/division01.mavl]
src/test/testcases/executables/P3/public/_2/lhs1.mavl
src/test/testcases/executables/P3/public/_2/lhs1.txt
Compiling file src/test/testcases/executables/P3/public/_2/lhs1.mavl
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_2/lhs2.mavl
src/test/testcases/executables/P3/public/_2/lhs2.txt
Compiling file src/test/testcases/executables/P3/public/_2/lhs2.mavl
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitMatLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitMatLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitMatLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_3/recordSelect1.mavl
src/test/testcases/executables/P3/public/_3/recordSelect1.txt
Compiling file src/test/testcases/executables/P3/public/_3/recordSelect1.mavl
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_4_1/Switchcase2.mavl
src/test/testcases/executables/P3/public/_4_1/Switchcase2.txt
Compiling file src/test/testcases/executables/P3/public/_4_1/Switchcase2.mavl
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_4_1/Switchcase1.mavl
src/test/testcases/executables/P3/public/_4_1/Switchcase1.txt
Compiling file src/test/testcases/executables/P3/public/_4_1/Switchcase1.mavl
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_4_2/foreach1.mavl
src/test/testcases/executables/P3/public/_4_2/foreach1.txt
Compiling file src/test/testcases/executables/P3/public/_4_2/foreach1.mavl
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_4_2/foreach2.mavl
src/test/testcases/executables/P3/public/_4_2/foreach2.txt
Compiling file src/test/testcases/executables/P3/public/_4_2/foreach2.mavl
VisitvariDecl wird aufgerufen
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_4_3/Select1.mavl
src/test/testcases/executables/P3/public/_4_3/Select1.txt
Compiling file src/test/testcases/executables/P3/public/_4_3/Select1.mavl
VisitvariDecl wird aufgerufen
VisitvariDecl wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
VisitvarAssign wird aufgerufen
VisitLHIdent wird aufgerufen
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
src/test/testcases/executables/P3/public/_1/division01.mavl
src/test/testcases/executables/P3/public/_1/division01.txt
Compiling file src/test/testcases/executables/P3/public/_1/division01.mavl
Done.
********** TAM Interpreter (Java Version 2.1esa3) **********
InputFile: build/test-output/a.tam
OutputFile: build/test-output/output.txt
]]></system-out>
  <system-err><![CDATA[Compiling testcase lhs1

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        1
0002:  LOADL       4
0003:  LOADA       2[LB]
0004:  STOREI(1)   
0005:  LOADL       5
0006:  LOADA       2[LB]
0007:  STOREI(1)   
0008:  LOAD  (1)   2[LB]
0009:  CALL  (CB)  32756[CB]	printInt
000A:  HALT  


Executing binary!


Compiling testcase lhs2

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        3
0002:  LOADL       4
0003:  LOADL       0
0004:  LOADA       2[LB]
0005:  add
0006:  STOREI(1)   
0007:  LOADL       17
0008:  LOADL       1
0009:  LOADA       2[LB]
000A:  add
000B:  STOREI(1)   
000C:  LOADL       9
000D:  LOADL       2
000E:  LOADA       2[LB]
000F:  add
0010:  STOREI(1)   
0011:  LOAD  (3)   2[LB]
0012:  LOADA       -3[ST]
0013:  LOADL       0
0014:  LOADL       1
0015:  mult
0016:  add
0017:  LOADI (1)   
0018:  POP   (1)   3
0019:  CALL  (CB)  32756[CB]	printInt
001A:  LOAD  (3)   2[LB]
001B:  LOADA       -3[ST]
001C:  LOADL       1
001D:  LOADL       1
001E:  mult
001F:  add
0020:  LOADI (1)   
0021:  POP   (1)   3
0022:  CALL  (CB)  32756[CB]	printInt
0023:  LOAD  (3)   2[LB]
0024:  LOADA       -3[ST]
0025:  LOADL       2
0026:  LOADL       1
0027:  mult
0028:  add
0029:  LOADI (1)   
002A:  POP   (1)   3
002B:  CALL  (CB)  32756[CB]	printInt
002C:  HALT  


Executing binary!


Compiling testcase recordSelect1

.data
0->hello world!
.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  LOADL       0
0002:  LOADL       12
0003:  LOAD  (2)   2[LB]
0004:  LOADA       -2[ST]
0005:  LOADL       0
0006:  add
0007:  LOADI (1)   
0008:  POP   (1)   2
0009:  CALL  (CB)  32759[CB]	printString
000A:  HALT  


Executing binary!


Compiling testcase Switchcase2

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        1
0002:  LOADL       16
0003:  LOADL       20
0004:  sub
0005:  LOAD  (1)   -1[ST]
0006:  LOADL       -4
0007:  eq
0008:  JUMPIF(0)   -1[CB]
0009:  LOADL       27
000A:  LOADA       2[LB]
000B:  STOREI(1)   
000C:  JUMP        16[CB]
000D:  LOADL       10
000E:  LOADA       2[LB]
000F:  STOREI(1)   
0010:  LOAD  (1)   2[LB]
0011:  CALL  (CB)  32756[CB]	printInt
0012:  HALT  


Executing binary!


Compiling testcase Switchcase1

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  LOADL       4
0002:  PUSH        1
0003:  LOAD  (1)   2[LB]
0004:  LOAD  (1)   -1[ST]
0005:  LOADL       5
0006:  eq
0007:  JUMPIF(0)   12[CB]
0008:  LOADL       7
0009:  LOADA       3[LB]
000A:  STOREI(1)   
000B:  JUMP        23[CB]
000C:  LOAD  (1)   -1[ST]
000D:  LOADL       4
000E:  eq
000F:  JUMPIF(0)   -1[CB]
0010:  LOADL       27
0011:  LOADA       3[LB]
0012:  STOREI(1)   
0013:  JUMP        23[CB]
0014:  LOADL       10
0015:  LOADA       3[LB]
0016:  STOREI(1)   
0017:  LOAD  (1)   3[LB]
0018:  CALL  (CB)  32756[CB]	printInt
0019:  HALT  


Executing binary!


Compiling testcase foreach1

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        3
0002:  LOADL       1
0003:  LOADL       1
0004:  LOADL       1
0005:  add
0006:  LOADL       3
0007:  LOADA       2[LB]
0008:  STOREI(3)   
0009:  PUSH        1
000A:  LOADL       0
000B:  LOAD  (3)   2[LB]
000C:  LOAD  (1)   6[LB]
000D:  LOADA       7[LB]
000E:  add
000F:  LOADI (1)   
0010:  STORE (1)   5[LB]
0011:  LOADL       3
0012:  LOADA       5[LB]
0013:  STOREI(1)   
0014:  POP   (0)   0
0015:  LOAD  (1)   5[LB]
0016:  LOAD  (1)   6[LB]
0017:  LOADA       2[LB]
0018:  add
0019:  STOREI(1)   
001A:  LOAD  (1)   6[LB]
001B:  LOADL       1
001C:  add
001D:  STORE (1)   6[LB]
001E:  LOAD  (1)   6[LB]
001F:  LOADL       3
0020:  lt
0021:  JUMPIF(1)   12[CB]
0022:  POP   (0)   2
0023:  LOAD  (3)   2[LB]
0024:  LOADA       -3[ST]
0025:  LOADL       0
0026:  LOADL       1
0027:  mult
0028:  add
0029:  LOADI (1)   
002A:  POP   (1)   3
002B:  CALL  (CB)  32756[CB]	printInt
002C:  LOAD  (3)   2[LB]
002D:  LOADA       -3[ST]
002E:  LOADL       1
002F:  LOADL       1
0030:  mult
0031:  add
0032:  LOADI (1)   
0033:  POP   (1)   3
0034:  CALL  (CB)  32756[CB]	printInt
0035:  LOAD  (3)   2[LB]
0036:  LOADA       -3[ST]
0037:  LOADL       2
0038:  LOADL       1
0039:  mult
003A:  add
003B:  LOADI (1)   
003C:  POP   (1)   3
003D:  CALL  (CB)  32756[CB]	printInt
003E:  HALT  


Executing binary!


Compiling testcase foreach2

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        4
0002:  PUSH        1
0003:  LOADL       0
0004:  LOADA       6[LB]
0005:  STOREI(1)   
0006:  PUSH        1
0007:  LOADL       0
0008:  LOAD  (4)   2[LB]
0009:  LOAD  (1)   8[LB]
000A:  LOADA       9[LB]
000B:  add
000C:  LOADI (1)   
000D:  STORE (1)   7[LB]
000E:  LOAD  (1)   6[LB]
000F:  LOADA       7[LB]
0010:  STOREI(1)   
0011:  LOAD  (1)   6[LB]
0012:  LOADL       1
0013:  add
0014:  LOADA       6[LB]
0015:  STOREI(1)   
0016:  POP   (0)   0
0017:  LOAD  (1)   7[LB]
0018:  LOAD  (1)   8[LB]
0019:  LOADA       2[LB]
001A:  add
001B:  STOREI(1)   
001C:  LOAD  (1)   8[LB]
001D:  LOADL       1
001E:  add
001F:  STORE (1)   8[LB]
0020:  LOAD  (1)   8[LB]
0021:  LOADL       4
0022:  lt
0023:  JUMPIF(1)   9[CB]
0024:  POP   (0)   2
0025:  LOAD  (4)   2[LB]
0026:  LOADA       -4[ST]
0027:  LOADL       0
0028:  LOADL       2
0029:  mult
002A:  add
002B:  LOADI (2)   
002C:  POP   (2)   4
002D:  LOADA       -2[ST]
002E:  LOADL       0
002F:  LOADL       1
0030:  mult
0031:  add
0032:  LOADI (1)   
0033:  POP   (1)   2
0034:  CALL  (CB)  32756[CB]	printInt
0035:  LOAD  (4)   2[LB]
0036:  LOADA       -4[ST]
0037:  LOADL       0
0038:  LOADL       2
0039:  mult
003A:  add
003B:  LOADI (2)   
003C:  POP   (2)   4
003D:  LOADA       -2[ST]
003E:  LOADL       1
003F:  LOADL       1
0040:  mult
0041:  add
0042:  LOADI (1)   
0043:  POP   (1)   2
0044:  CALL  (CB)  32756[CB]	printInt
0045:  LOAD  (4)   2[LB]
0046:  LOADA       -4[ST]
0047:  LOADL       1
0048:  LOADL       2
0049:  mult
004A:  add
004B:  LOADI (2)   
004C:  POP   (2)   4
004D:  LOADA       -2[ST]
004E:  LOADL       0
004F:  LOADL       1
0050:  mult
0051:  add
0052:  LOADI (1)   
0053:  POP   (1)   2
0054:  CALL  (CB)  32756[CB]	printInt
0055:  LOAD  (4)   2[LB]
0056:  LOADA       -4[ST]
0057:  LOADL       1
0058:  LOADL       2
0059:  mult
005A:  add
005B:  LOADI (2)   
005C:  POP   (2)   4
005D:  LOADA       -2[ST]
005E:  LOADL       1
005F:  LOADL       1
0060:  mult
0061:  add
0062:  LOADI (1)   
0063:  POP   (1)   2
0064:  CALL  (CB)  32756[CB]	printInt
0065:  HALT  


Executing binary!


Compiling testcase Select1

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  PUSH        1
0002:  PUSH        1
0003:  LOADL       20
0004:  LOADL       10
0005:  LOADA       2[LB]
0006:  STOREI(1)   
0007:  LOAD  (1)   2[LB]
0008:  LOAD  (1)   4[LB]
0009:  gt
000A:  JUMPIF(0)   13[CB]
000B:  LOAD  (1)   2[LB]
000C:  JUMP        14[CB]
000D:  LOAD  (1)   4[LB]
000E:  LOADA       3[LB]
000F:  STOREI(1)   
0010:  LOAD  (1)   3[LB]
0011:  CALL  (CB)  32756[CB]	printInt
0012:  HALT  


Executing binary!


Compiling testcase division01

.text
0000:  CALL  (CB)  1[CB]	main

# function VOID main()
0001:  LOADL       1087583027
0002:  LOADL       1074580685
0003:  LOAD  (1)   2[LB]
0004:  LOAD  (1)   3[LB]
0005:  floatDiv
0006:  LOAD  (1)   4[LB]
0007:  CALL  (CB)  32757[CB]	printFloat
0008:  LOADL       6
0009:  LOADL       2
000A:  LOAD  (1)   5[LB]
000B:  LOAD  (1)   6[LB]
000C:  div
000D:  LOAD  (1)   7[LB]
000E:  CALL  (CB)  32756[CB]	printInt
000F:  HALT  


Executing binary!


]]></system-err>
</testsuite>
